/*************************************************************************
 * 
 * SCSC CONFIDENTIAL
 * __________________
 * 
 * Copyright (c) [2009] - [2012] 
 * SubCarrier System Corp. (SCSC) 
 * All Rights Reserved.
 * 
 * NOTICE:  All information contained herein is, and remains,
 * the property of SubCarrier System Corp. (SCSC) and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to SubCarrier System Corp. (SCSC)
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from SubCarrier System Corp. (SCSC).
 *
 *
 * This file is subject to the terms and conditions of use defined 
 * in the files 'LICENSE.rft' or 'LICENSE.pdf' which is part of this 
 * source code package.
 *
 * LIC: #Battelle_001_01_dbfff42a90727d02153511a33480572b#
 */

/*
 * Generated by asn1c-0.9.22 (http://lionet.info/asn1c) [SCSCrev09]
 * From ASN.1 module "DSRC"
 * 	found in "DSRC_R36_Source.ASN"
 * 	`asn1c -S/skeletons`
 */

#ifndef	_SignalControlZone_H_
#define	_SignalControlZone_H_


#include <asn_application.h>

/* Including external dependencies */
#include "DescriptiveName.h"
#include "SignalReqScheme.h"
#include "LaneNumber.h"
#include <asn_SEQUENCE_OF.h>
#include <constr_SEQUENCE_OF.h>
#include "LaneWidth.h"
#include "NodeList.h"
#include <constr_SEQUENCE.h>
#include <constr_CHOICE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum data_PR {
	data_PR_NOTHING = 0,	/* No components present */
	data_PR_laneSet = 1,	// DCK mod, added fixed values for debugging
	data_PR_zones = 2
} data_PR;

//
//DCK mods start
//
typedef struct LaneSet_sc {
		A_SEQUENCE_OF(LaneNumber_t) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} LaneSet_sc;

typedef struct Zones_sc {
	A_SEQUENCE_OF(struct Member ) list;
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} Zones_sc;

typedef struct data_sc {
		data_PR present;
		union SignalControlZone__data_u {
			LaneSet_sc laneSet;
			Zones_sc   zones;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} data_sc;

typedef struct Enclosed_sc {
		A_SEQUENCE_OF(LaneNumber_t) list;
						
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} Enclosed_sc;

typedef struct Member {
	Enclosed_sc    *enclosed;
	LaneWidth_t	*laneWidth	/* OPTIONAL */;
	NodeList_t	 nodeList;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
	} Member;
//
//DCK mods end
//

/* SignalControlZone */
typedef struct SignalControlZone {
	DescriptiveName_t	*name	/* OPTIONAL */;
	SignalReqScheme_t	 pValue;
	struct data {
		data_PR present;
		union SignalControlZone__data_u {
			// DCK mod, below reduced to use new types
			LaneSet_sc laneSet;
			Zones_sc zones ;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} data;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} SignalControlZone_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_SignalControlZone;

/* Define supported Utility Calls */
void SignalControlZone_Init (SignalControlZone_t* theObj);
//void SignalControlZone_ToBlob (SignalControlZone_t* theObj, char* theBlob);
//void SignalControlZone_FromBlob (SignalControlZone_t* theObj, char* theBlob);


#ifdef __cplusplus
}
#endif

#endif	/* _SignalControlZone_H_ */
