/*************************************************************************
 * 
 * SCSC CONFIDENTIAL
 * __________________
 * 
 * Copyright (c) [2009] - [2012] 
 * SubCarrier System Corp. (SCSC) 
 * All Rights Reserved.
 * 
 * NOTICE:  All information contained herein is, and remains,
 * the property of SubCarrier System Corp. (SCSC) and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to SubCarrier System Corp. (SCSC)
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from SubCarrier System Corp. (SCSC).
 *
 *
 * This file is subject to the terms and conditions of use defined 
 * in the files 'LICENSE.rft' or 'LICENSE.pdf' which is part of this 
 * source code package.
 *
 * LIC: #Battelle_001_01_dbfff42a90727d02153511a33480572b#
 */

/*
 * Generated by asn1c-0.9.22 (http://lionet.info/asn1c) [SCSCrev09]
 * From ASN.1 module "DSRC"
 * 	found in "DSRC_R36_Source.ASN"
 * 	`asn1c -S/skeletons`
 */

#ifndef	_PathHistory_H_
#define	_PathHistory_H_


#include <asn_application.h>

/* Including external dependencies */
#include "GPSstatus.h"
#include "Count.h"
#include <OCTET_STRING.h>
#include <asn_SEQUENCE_OF.h>
#include <constr_SEQUENCE_OF.h>
#include <constr_CHOICE.h>
#include <constr_SEQUENCE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum crumbData_PR {
	crumbData_PR_NOTHING = 0,	/* No components present */
	crumbData_PR_pathHistoryPointSets_01 = 1, // Note DCK added fixed values for debug use
	crumbData_PR_pathHistoryPointSets_02 = 2,
	crumbData_PR_pathHistoryPointSets_03 = 3,
	crumbData_PR_pathHistoryPointSets_04 = 4,
	crumbData_PR_pathHistoryPointSets_05 = 5,
	crumbData_PR_pathHistoryPointSets_06 = 6,
	crumbData_PR_pathHistoryPointSets_07 = 7,
	crumbData_PR_pathHistoryPointSets_08 = 8,
	crumbData_PR_pathHistoryPointSets_09 = 9,
	crumbData_PR_pathHistoryPointSets_10 = 10
} crumbData_PR;

/* Forward declarations */
struct FullPositionVector;
struct PathHistoryPointType_01;

//
// DCK mods
//
typedef	struct crumbData {
		crumbData_PR present;
		union PathHistory__crumbData_u {
			struct pathHistoryPointSets_01 {
				A_SEQUENCE_OF(struct PathHistoryPointType_01) list;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} pathHistoryPointSets_01;
			OCTET_STRING_t	 pathHistoryPointSets_02;
			OCTET_STRING_t	 pathHistoryPointSets_03;
			OCTET_STRING_t	 pathHistoryPointSets_04;
			OCTET_STRING_t	 pathHistoryPointSets_05;
			OCTET_STRING_t	 pathHistoryPointSets_06;
			OCTET_STRING_t	 pathHistoryPointSets_07;
			OCTET_STRING_t	 pathHistoryPointSets_08;
			OCTET_STRING_t	 pathHistoryPointSets_09;
			OCTET_STRING_t	 pathHistoryPointSets_10;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} crumbData;


typedef	struct pathHistoryPointSets_01 {
		A_SEQUENCE_OF(struct PathHistoryPointType_01) list;
				
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} pathHistoryPointSets_01;

//
//DCK mods end
//

/* PathHistory */
typedef struct PathHistory {
	struct FullPositionVector	*initialPosition	/* OPTIONAL */;
	GPSstatus_t					*currGPSstatus		/* OPTIONAL */;
	Count_t						*itemCnt			/* OPTIONAL */;
	struct crumbData {
		crumbData_PR present;
		union PathHistory__crumbData_u {
			struct pathHistoryPointSets_01 {
				A_SEQUENCE_OF(struct PathHistoryPointType_01) list;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} pathHistoryPointSets_01;
			OCTET_STRING_t	 pathHistoryPointSets_02;
			OCTET_STRING_t	 pathHistoryPointSets_03;
			OCTET_STRING_t	 pathHistoryPointSets_04;
			OCTET_STRING_t	 pathHistoryPointSets_05;
			OCTET_STRING_t	 pathHistoryPointSets_06;
			OCTET_STRING_t	 pathHistoryPointSets_07;
			OCTET_STRING_t	 pathHistoryPointSets_08;
			OCTET_STRING_t	 pathHistoryPointSets_09;
			OCTET_STRING_t	 pathHistoryPointSets_10;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} crumbData;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} PathHistory_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_PathHistory;

/* Define supported Utility Calls */
void PathHistory_Init (PathHistory_t* theObj);
//void PathHistory_ToBlob (PathHistory_t* theObj, char* theBlob);
//void PathHistory_FromBlob (PathHistory_t* theObj, char* theBlob);


#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "FullPositionVector.h"
#include "PathHistoryPointType-01.h"

#endif	/* _PathHistory_H_ */
