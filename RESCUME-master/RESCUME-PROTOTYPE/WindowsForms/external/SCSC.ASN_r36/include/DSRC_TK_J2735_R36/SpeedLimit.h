/*************************************************************************
 * 
 * SCSC CONFIDENTIAL
 * __________________
 * 
 * Copyright (c) [2009] - [2012] 
 * SubCarrier System Corp. (SCSC) 
 * All Rights Reserved.
 * 
 * NOTICE:  All information contained herein is, and remains,
 * the property of SubCarrier System Corp. (SCSC) and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to SubCarrier System Corp. (SCSC)
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from SubCarrier System Corp. (SCSC).
 *
 *
 * This file is subject to the terms and conditions of use defined 
 * in the files 'LICENSE.rft' or 'LICENSE.pdf' which is part of this 
 * source code package.
 *
 * LIC: #Battelle_001_01_dbfff42a90727d02153511a33480572b#
 */

/*
 * Generated by asn1c-0.9.22 (http://lionet.info/asn1c) [SCSCrev09]
 * From ASN.1 module "DSRC"
 * 	found in "DSRC_R36_Source.ASN"
 * 	`asn1c -S/skeletons`
 */

#ifndef	_SpeedLimit_H_
#define	_SpeedLimit_H_


#include <asn_application.h>

/* Including external dependencies */
#include <asn_SEQUENCE_OF.h>
#include "ITIScodes.h"
#include "ITIStext.h"
#include <IA5String.h>
#include <constr_CHOICE.h>
#include <constr_SEQUENCE.h>
#include <constr_SEQUENCE_OF.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum item_PR_sl {
	item_PR_NOTHING_sl = 0,	/* No components present */
	item_PR_itis_sl = 1,	// DCK mod, added fixed values for debugging
	item_PR_text_sl = 2
} item_PR_sl;

//
// DCK added struc
//
typedef	struct item_sl {
			item_PR_sl present;
			union item_u {
				ITIScodes_t	 itis;
				ITIStext_t	 text;
			} choice;
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} item_sl;

typedef struct Member_sl {
	    struct item_sl;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} Member_sl;
//
// DCK edit end (and below)
//


/* SpeedLimit */
typedef struct SpeedLimit {
	A_SEQUENCE_OF(struct Member_sl ) list;
	// DCK mods to create above and replace below
	//A_SEQUENCE_OF(struct Member {
	//	struct item {
	//		item_PRsl present;
	//		union item_u {
	//			ITIScodes_t	 itis;
	//			IA5String_t	 text;
	//		} choice;
	//		
	//		/* Context for parsing across buffer boundaries */
	//		asn_struct_ctx_t _asn_ctx;
	//	} item;
	//	
	//	/* Context for parsing across buffer boundaries */
	//	asn_struct_ctx_t _asn_ctx;
	//} ) list;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} SpeedLimit_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_SpeedLimit;

/* Define supported Utility Calls */
void SpeedLimit_Init (SpeedLimit_t* theObj);
//void SpeedLimit_ToBlob (SpeedLimit_t* theObj, char* theBlob);
//void SpeedLimit_FromBlob (SpeedLimit_t* theObj, char* theBlob);


#ifdef __cplusplus
}
#endif

#endif	/* _SpeedLimit_H_ */
