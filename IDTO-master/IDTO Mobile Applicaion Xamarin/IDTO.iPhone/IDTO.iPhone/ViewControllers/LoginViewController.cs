// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using IDTO.Common;
using IDTO.Common.Models;
using GoogleAnalytics.iOS;
namespace IDTO.iPhone
{
	public delegate void LoginEventHandler();

	public partial class LoginViewController : IDTOViewController
	{
		public event LoginEventHandler LoginEvent;

		public LoginViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			setupConnectorView ();


			txtEmailAddress.ShouldReturn += (textField) => { 
				txtPassword.BecomeFirstResponder();
				return true; 
			};

			txtPassword.ShouldReturn += (textField) => { 
				textField.ResignFirstResponder();
				return true; 
			};

			// Perform any additional setup after loading the view, typically from a nib.
		}

		private void setupConnectorView ()
		{
			this.AddConnectorView (lblLogin);

			ExtendToView = formView;
		}

		async partial void SubmitLogin (NSObject sender)
		{
			showLoading ();


			iOSLoginManager loginManager = iOSLoginManager.Instance;

			String username = txtEmailAddress.Text;
			String password = txtPassword.Text;

			LoginResult loginResult = await loginManager.Login(username, password);

			dismissLoading();


			GAI.SharedInstance.DefaultTracker.Send (GAIDictionaryBuilder.CreateEvent("ui_action", "user login", "login result", Convert.ToInt32(loginResult.Success)).Build());

			if(loginResult.Success)
			{
				//check for terms acceptance
				AccountManager acm = new AccountManager ();

				TravelerModel traveler = await acm.GetTravelerByEmail(username);

				if (!traveler.InformedConsent) {
					PerformSegue ("LoginTermsSegue", this);
				}
				else{
					if( LoginEvent!=null)
						LoginEvent();
				}

			}
			else
			{
				UIAlertView alert = new UIAlertView ("Error", loginResult.ErrorString, null, "OK", null);
				alert.Show();
			}
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);

			if (segue.Identifier == "RegisterSegue") {
				RegisterViewController regVC = (RegisterViewController)segue.DestinationViewController;
				regVC.RegisteredEvent += new RegisteredEventHandler (Registered);
				regVC.CanceledEvent += new RegisteredEventHandler (RegistrationCanceled);
			}else if (segue.Identifier == "LoginTermsSegue") {
				TermsViewController vc = (TermsViewController)segue.DestinationViewController;
				vc.TermsDismissedEvent += TermsDismissed;
			}
		}

		public void TermsDismissed(bool isAccepted)
		{
			this.DismissViewController (true, async () => {
				if (!isAccepted) {
					NavigationController.PopViewControllerAnimated (true);
				}
				else{
					AccountManager acm = new AccountManager ();

					iOSLoginManager loginManager = iOSLoginManager.Instance;

					TravelerModel traveler = await acm.GetTravelerByEmail(loginManager.GetUsername());
					traveler.InformedConsent = true;
					traveler.InformedConsentDate = DateTime.UtcNow;

					traveler = await acm.UpdateTraveler(traveler);

					NavigationController.PopViewControllerAnimated (true);

					if( LoginEvent!=null)
						LoginEvent();
				}
			});

		}

		public void RegistrationCanceled()
		{
			NavigationController.PopViewControllerAnimated (true);
		}

		public void Registered()
		{
			NavigationController.PopViewControllerAnimated (true);

			if( LoginEvent!=null)
				LoginEvent();
		}
	}
}
