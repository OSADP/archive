// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Net.Http;
using System.IO;

using System.Threading.Tasks;
using System.Collections.Generic;

using IDTO.Common;

using MonoTouch.CoreAnimation;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.CoreLocation;
using IDTO.Mobile.Manager;
using IDTO.Common.Models;

namespace IDTO.iPhone
{
	public partial class HomeViewController : IDTOViewController
	{
		private CLLocationManager mLocationManager;

		private HomeDataManager mHomeDataManager;
		private UserTripDataManager mUserTripManager;

		private Trip mTripSelected;
		private Trip mNextTrip;

		private NSObject _observer;

		public HomeViewController (IntPtr handle) : base (handle)
		{
			mHomeDataManager = new HomeDataManager ();
			mUserTripManager = new UserTripDataManager ();
		}

		#region View lifecycle
		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

		
			mLocationManager = new CLLocationManager ();
			mLocationManager.DesiredAccuracy = 100;

			mLocationManager.LocationsUpdated += (object sender, CLLocationsUpdatedEventArgs e) => {
				CLLocationCoordinate2D currentLocation = e.Locations[e.Locations.Length-1].Coordinate;

				WeatherInfo weatherInfo = mHomeDataManager.GetWeather(currentLocation.Latitude, currentLocation.Longitude);
				txtOutsideTemp.Text = ((int)weatherInfo.TemperatureDegF).ToString() + "Â°";
				mLocationManager.StopUpdatingLocation();

				imgWeather.Image = UIImage.FromFile(weatherInfo.IconName);

			};

			setupConnectorView ();
			// Perform any additional setup after loading the view, typically from a nib.
		}
			
		private void setupConnectorView ()
		{
			this.AddConnectorView (lblNextTrip);
			this.AddConnectorView (lblUpcomingTrips);
			this.AddConnectorView (btnPlanTrip);
			this.AddConnectorView (btnTripHistory);
			this.AddConnectorView (btnAccount);

			ExtendToView = btnAccount;
		}

		public async override void ViewDidAppear (bool animated)
		{
			_observer = NSNotificationCenter.DefaultCenter.AddObserver(UIApplication.DidBecomeActiveNotification,async notification =>
				{
					await refresh();
				}
			);

			base.ViewDidAppear (animated);
			await refresh ();
		}



		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);
			mLocationManager.StopUpdatingLocation ();
			NSNotificationCenter.DefaultCenter.RemoveObserver (_observer);
		}

		public override void ViewDidDisappear (bool animated)
		{

		}

		async private Task<bool> refresh()
		{
			showLoading ();
			await checkLogin();

			dismissLoading();

			return true;
		}
			
		private async Task checkLogin()
		{
			iOSLoginManager loginManager = iOSLoginManager.Instance;
			bool shouldLogout = NSUserDefaults.StandardUserDefaults.BoolForKey("logout_preference");

			if (shouldLogout) {
				loginManager.Logout ();
				NSUserDefaults.StandardUserDefaults.SetBool(false, "logout_preference");
			}

			AccountManager acm = new AccountManager ();
			TravelerModel traveler = await acm.GetTravelerByEmail(loginManager.GetUsername());

			if (traveler!=null && !traveler.InformedConsent) {
				loginManager.Logout ();
			}


			if (!await loginManager.IsLoggedIn ()) {
				PerformSegue ("LoginSegue", this);
			} else {
				UIRemoteNotificationType notificationTypes = UIRemoteNotificationType.Alert | 
					UIRemoteNotificationType.Badge | UIRemoteNotificationType.Sound;
				UIApplication.SharedApplication.RegisterForRemoteNotificationTypes(notificationTypes); 

				if (CLLocationManager.LocationServicesEnabled)
					mLocationManager.StartUpdatingLocation ();

				await UpdateTripDisplays ();
			}
		}

		async private Task UpdateTripDisplays()
		{
			iOSLoginManager loginManager = iOSLoginManager.Instance;

			int id = loginManager.GetTravelerId ();

			int maxRecords = 1;
			bool retina = (UIScreen.MainScreen.Scale > 1.0);
			if (retina) {
				if (UIScreen.MainScreen.Bounds.Size.Height > 480.0f) {
					maxRecords = 3;
				}
			}

			int upcomingTripCount = await mUserTripManager.GetUpcomingTripCount (id);
			if (upcomingTripCount > maxRecords)
				btnMoreTrips.Hidden = false;
			else
				btnMoreTrips.Hidden = true;

			mNextTrip = await mHomeDataManager.GetNextTrip (id);

			updateNextTripDisplay (mNextTrip);

			List<Trip> trips = await mUserTripManager.GetUpcomingTripsAfterNext (id, maxRecords);
			UpcomingTripsTableSource tableSource = new UpcomingTripsTableSource (trips, new TripTableCellHomeScreen(""));

			tableSource.TripSelected += (Trip trip) => {
				mTripSelected = trip;
				PerformSegue("TripDetailsSegue",this);
			};


			tableUpcomingTrips.Source = tableSource;
			tableUpcomingTrips.ReloadData ();
			dismissLoading ();
		}

		private void updateNextTripDisplay(Trip nextTrip)
		{
			if (nextTrip != null) {
				txtNextTripAmPm.Hidden = false;
				txtNextTripDate.Hidden = false;
				txtNextTripDuration.Hidden = false;
				txtNextTripSubTitle.Hidden = false;
				txtNextTripTime.Hidden = false;

				txtNextTripAmPm.Text = nextTrip.TripStartDate.ToLocalTime ().GetTimeAmPm ();
				txtNextTripDate.Text = nextTrip.TripStartDate.ToLocalTime ().GetTodayTomorrowString ();
				txtNextTripDuration.Text = nextTrip.Duration_min ().ToString () + " min";
				txtNextTripSubTitle.Text = nextTrip.GetFirstStepString ();
				txtNextTripTime.Text = nextTrip.TripStartDate.ToLocalTime ().GetTimeString ();
				txtNextTripTitle.Text = nextTrip.Destination;
			} else {
				txtNextTripAmPm.Hidden = true;
				txtNextTripDate.Hidden = true;
				txtNextTripDuration.Hidden = true;
				txtNextTripSubTitle.Hidden = true;
				txtNextTripTime.Hidden = true;
				txtNextTripTitle.Text = "No Trips Scheduled";
			}
		}
		#endregion

		public override bool ShouldPerformSegue (string segueIdentifier, NSObject sender)
		{
			if (segueIdentifier == "NextTripDetailSegue") {
				if (mNextTrip == null)
					return false;
			}
			return true;
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);

			if (segue.Identifier == "LoginSegue") {
				UINavigationController navController = (UINavigationController)segue.DestinationViewController;
				LoginViewController loginVC = (LoginViewController)navController.ViewControllers [0];
				loginVC.LoginEvent += new LoginEventHandler (LoggedIn);
			} else if (segue.Identifier == "AccountSegue") {
				AccountViewController accVC = (AccountViewController)segue.DestinationViewController;
				accVC.LogoutEvent += new LogoutEventHandler (LoggedOut);
			} else if (segue.Identifier == "NextTripDetailSegue") {
				TripDetailsViewController vc = (TripDetailsViewController)segue.DestinationViewController;
				vc.TripToShow = mNextTrip;
			} else if (segue.Identifier == "TripDetailsSegue") {
				TripDetailsViewController vc = (TripDetailsViewController)segue.DestinationViewController;
				vc.TripToShow = mTripSelected;
			} 
		}
			
		private void TripSaved()
		{
			this.NavigationController.PopToRootViewController (false);
		}

		async private void LoggedOut()
		{
			AppDelegate appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;
			appDelegate.UnRegisterForRemoteNotifications ();

			this.NavigationController.PopViewControllerAnimated (true);

			await checkLogin();

		}

		private void LoggedIn()
		{
			DismissViewController (false, null);
		}

		public async Task<UIImage> LoadImage (string imageUrl)
		{
			var httpClient = new HttpClient();

			Task<byte[]> contentsTask = httpClient.GetByteArrayAsync (imageUrl);

			// await! control returns to the caller and the task continues to run on another thread
			var contents = await contentsTask;

			// load from bytes
			return UIImage.LoadFromData (NSData.FromArray (contents));
		}
	}
}
