// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using System.Collections.Generic;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.CoreLocation;
using System.Threading.Tasks;
using IDTO.Mobile.Manager;
using IDTO.Common;
using IDTO.Common.Models;

using GoogleAnalytics.iOS;

namespace IDTO.iPhone
{
	public partial class PlanSearchViewController : IDTOViewController
	{

		private static string MAX_WALK_DIST_USER_PREF = "MAX_WALK_DIST_USER_PREF";
		private static string CURRENT_LOCATION_STRING = "Current Location";
		private UserTripDataManager mUserTripDataManager;
		private ActionSheetDatePicker mActionSheetDatePicker;
		private ActionSheetPicker mActionSheetPicker;
		private TripSearchResult mSearchResults;
		private CLLocationManager mLocationManager;

		 

		private int mCurrentLocationUpdateCounter;

		private String mCityString;
		private String mStateString;

		private CLLocationCoordinate2D mCurrentLocation;

		public PlanSearchViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			mUserTripDataManager = new UserTripDataManager ();

			mLocationManager = new CLLocationManager ();
			mLocationManager.DesiredAccuracy = 100;

			mLocationManager.LocationsUpdated += (object sender, CLLocationsUpdatedEventArgs e) => {
				mCurrentLocationUpdateCounter++;
				EnableCurrentLocation();

				CLLocation location = e.Locations[e.Locations.Length-1];
				mCurrentLocation = e.Locations[e.Locations.Length-1].Coordinate;

				mCityString = "";
				mStateString="";

				var geocoder = new CLGeocoder ();

				geocoder.ReverseGeocodeLocation (location, (CLPlacemark[] placemarks, NSError error) => {
					if ((placemarks != null)&&(placemarks.Length>0)) 
					{
						mStateString = placemarks[0].AdministrativeArea;
						mCityString = placemarks[0].Locality;
					}
				} );

				if(mCurrentLocationUpdateCounter > 5)
					mLocationManager.StopUpdatingLocation();
			};


			txtStartLocation.ShouldReturn += (textField) => { 
				txtEndLocation.BecomeFirstResponder();
				return true; 
			};

			txtEndLocation.ShouldReturn += (textField) => { 
				textField.ResignFirstResponder();
				return true; 
			};

			setupConnectorView ();

			txtDate.Text = DateTime.Now.AddMinutes(5).ToString ("g");
		}

		private void setupConnectorView ()
		{
			AddConnectorView (lblPlanATrip);
			ExtendToView = planFormBkgrndView;
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			DisableCurrentLocation ();

			if (CLLocationManager.LocationServicesEnabled)
				mLocationManager.StartUpdatingLocation ();


			UIView tempLeftViewStart = new UIView (new RectangleF (0, 0, 45, 30));
			UIView tempLeftViewEnd = new UIView (new RectangleF (0, 0, 45, 30));
			UIView tempDateView = new UIView (new RectangleF (0, 0, 45, 30));
			UIView tempMaxWalkView = new UIView (new RectangleF (0, 0, 110, 30));
			
			txtStartLocation.LeftView = tempLeftViewStart;
			txtStartLocation.LeftViewMode = UITextFieldViewMode.Always;

			txtEndLocation.LeftView = tempLeftViewEnd;
			txtEndLocation.LeftViewMode = UITextFieldViewMode.Always;

			txtDate.LeftView = tempDateView;
			txtDate.LeftViewMode = UITextFieldViewMode.Always;



			txtMaxWalk.LeftView = tempMaxWalkView;
			txtMaxWalk.LeftViewMode = UITextFieldViewMode.Always;
			var userPrefs = NSUserDefaults.StandardUserDefaults;
			String maxWalkString = userPrefs.StringForKey (MAX_WALK_DIST_USER_PREF);
			if (String.IsNullOrEmpty (maxWalkString))
				txtMaxWalk.Text = "1/4 Mile";
			else
				txtMaxWalk.Text = maxWalkString;
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

			mLocationManager.StopUpdatingLocation ();
		}

		async partial void SearchForTrips (MonoTouch.Foundation.NSObject sender)
		{
			showLoading();
			await search();
			dismissLoading();
		}

		async private Task search()
		{
			//Save Date Time

			var userPrefs = NSUserDefaults.StandardUserDefaults;
			userPrefs.SetString (txtMaxWalk.Text, MAX_WALK_DIST_USER_PREF);
			userPrefs.Synchronize();

			String maxWalkString = txtMaxWalk.Text.Replace ("Mile", "").Trim ();

			double maxWalkDistMeters = 500;
			if (maxWalkString.Equals ("1/4"))
				maxWalkDistMeters = 403;
			else if (maxWalkString.Equals ("1/2"))
				maxWalkDistMeters = 805;
			else if (maxWalkString.Equals ("3/4"))
				maxWalkDistMeters = 1207;
			else if (maxWalkString.Equals ("1"))
				maxWalkDistMeters = 1610;


			bool isDeparture = true;

			DateTime tripDate = DateTime.Parse(txtDate.Text);

			int selectedIndex = segmentDateType.SelectedSegment;

			string selectedValue = segmentDateType.TitleAt(selectedIndex);

			if(selectedValue.Equals("Departure"))
				isDeparture = true;
			else
				isDeparture = false;

			string startLocation = txtStartLocation.Text;
			string endLocation = txtEndLocation.Text;

			if (startLocation.Equals (CURRENT_LOCATION_STRING)) {
				startLocation = mCurrentLocation.Latitude.ToString () + "," + mCurrentLocation.Longitude.ToString ();
			} 

			if(endLocation.Equals(CURRENT_LOCATION_STRING))
			{
				endLocation = mCurrentLocation.Latitude.ToString() +"," + mCurrentLocation.Longitude.ToString();
			}

			mSearchResults = await mUserTripDataManager.SearchForTrips(startLocation, endLocation, maxWalkDistMeters, tripDate, isDeparture, mCityString, mStateString);
			if (mSearchResults != null) {
				GAI.SharedInstance.DefaultTracker.Send (GAIDictionaryBuilder.CreateEvent ("ui_action", "search trips", "search results", mSearchResults.itineraries.Count).Build());

				this.PerformSegue ("SearchResultsSegue", this);
			}else {
				GAI.SharedInstance.DefaultTracker.Send (GAIDictionaryBuilder.CreateEvent("ui_action", "search trips", "search results", -1).Build());
				UIAlertView alert = new UIAlertView ("No Results", "No trips found.  Please check your start and end location.  Location can be either current location or an address.", null, "OK", null);
				alert.Show();
			}
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);
			if (segue.Identifier == "SearchResultsSegue") {
				SearchResultsTableViewController vc = (SearchResultsTableViewController)segue.DestinationViewController;
				vc.SearchResults = mSearchResults;

			} else if(segue.Identifier == "viewFavFromStart") {
				FavoritesViewController vc = (FavoritesViewController)segue.DestinationViewController;

				vc.FavoriteSelected += (String name) => {
					this.NavigationController.PopViewControllerAnimated(true);
					txtStartLocation.Text = name;
				};


			}
			else if(segue.Identifier == "viewFavFromEnd") {
				FavoritesViewController vc = (FavoritesViewController)segue.DestinationViewController;

				vc.FavoriteSelected += (String name) => {
					this.NavigationController.PopViewControllerAnimated(true);
					txtEndLocation.Text = name;
				};
			}
		}

		partial void MaxWalkDidBeginEditing (NSObject sender)
		{

			mActionSheetPicker = new ActionSheetPicker(this.View);
			mActionSheetPicker.Title = "Choose Distance:";

			mActionSheetPicker.ActionSheetValChanged +=(newValue) => {
				txtMaxWalk.Text = newValue;
			};

			mActionSheetPicker.ActionSheetComplete +=() => {

				txtMaxWalk.ResignFirstResponder();
			};

			mActionSheetPicker.Show ();
		
		}

		partial void DateDidBeginEditing (NSObject sender)
		{
			DateTime dtStart = DateTime.Now.AddMinutes(5);

			DateTime dtDate = DateTime.Parse(txtDate.Text);

			mActionSheetDatePicker = new ActionSheetDatePicker(this.View);
			mActionSheetDatePicker.Title = "Choose Date:";

			mActionSheetDatePicker.DatePicker.Mode = UIDatePickerMode.DateAndTime;
			mActionSheetDatePicker.DatePicker.SetDate(dtDate, true);
			mActionSheetDatePicker.DatePicker.MinimumDate = dtStart;
			mActionSheetDatePicker.DatePicker.MaximumDate = dtStart.AddDays (7);
			mActionSheetDatePicker.DatePicker.MinuteInterval = 5;


			mActionSheetDatePicker.DatePicker.ValueChanged += (s, e) => {
				DateTime dtselected = (s as UIDatePicker).Date;
				dtselected = dtselected.ToLocalTime();


				txtDate.Text = dtselected.ToString ("g");
			};

			mActionSheetDatePicker.ActionSheetComplete +=() => {
				txtDate.ResignFirstResponder();
			};

			mActionSheetDatePicker.Show ();
		}

		partial void DateDidEndEditing (NSObject sender)
		{

		}

		private void EnableCurrentLocation()
		{
			btnCurrentLocEnd.Hidden = false;
			btnCurrentLocStart.Hidden = false;
		}

		private void DisableCurrentLocation()
		{
			mCurrentLocationUpdateCounter = 0;
			btnCurrentLocEnd.Hidden = true;
			btnCurrentLocStart.Hidden = true;
		}

		partial void CurrentLocationStartClicked (NSObject sender)
		{
			txtStartLocation.Text = CURRENT_LOCATION_STRING;
		}

		partial void CurrentLocationEndClicked (NSObject sender)
		{
			txtEndLocation.Text = CURRENT_LOCATION_STRING;
		}

		partial void StarEndClicked (MonoTouch.Foundation.NSObject sender)
		{
			AppDelegate appDelegate = UIApplication.SharedApplication.Delegate as AppDelegate;
			FavoritesDbManager favorites = appDelegate.FavoriteLocations;

			FavoriteLocation fav = new FavoriteLocation();
			fav.Location = txtEndLocation.Text;

			favorites.SaveFavoriteLocation(fav);

			UIAlertView alert = new UIAlertView ("Saved", "Location saved to favorites.", null, "OK", null);
			alert.Show();
		}

		partial void StarStartClicked (MonoTouch.Foundation.NSObject sender)
		{
			AppDelegate appDelegate = UIApplication.SharedApplication.Delegate as AppDelegate;
			FavoritesDbManager favorites = appDelegate.FavoriteLocations;

			FavoriteLocation fav = new FavoriteLocation();
			fav.Location = txtStartLocation.Text;

			favorites.SaveFavoriteLocation(fav);
			UIAlertView alert = new UIAlertView ("Saved", "Location saved to favorites.", null, "OK", null);
			alert.Show();
		}
	}
}
