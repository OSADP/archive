// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using IDTO.Common;
using IDTO.Common.Models;
using GoogleAnalytics.iOS;

namespace IDTO.iPhone
{
	public delegate void RegisteredEventHandler();

	public partial class RegisterViewController : IDTOViewController
	{
		public event RegisteredEventHandler RegisteredEvent;
		public event RegisteredEventHandler CanceledEvent;
		public RegisterViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			setupConnectorView ();


			txtFirstName.ShouldReturn += (textField) => { 
				txtLastName.BecomeFirstResponder();
				return true; 
			};

			txtLastName.ShouldReturn += (textField) => { 
				txtEmailAddress.BecomeFirstResponder();
				return true; 
			};

			txtEmailAddress.ShouldReturn += (textField) => { 
				txtPassword.BecomeFirstResponder();
				return true; 
			};

			txtPassword.ShouldReturn += (textField) => { 
				txtVerifyPassword.BecomeFirstResponder();
				return true; 
			};
				
			txtVerifyPassword.ShouldReturn += (textField) => { 
				textField.ResignFirstResponder();
				return true; 
			};

			this.PerformSegue ("TermsSegue", this);
			// Perform any additional setup after loading the view, typically from a nib.
		}

		private void setupConnectorView ()
		{
			this.AddConnectorView (lblCreateAccount);

			ExtendToView = formView;
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);
			if (segue.Identifier.Equals ("TermsSegue")) {
				TermsViewController tvc = (TermsViewController) segue.DestinationViewController;
				tvc.TermsDismissedEvent += TermsDismissed;
			}
		}

		public void TermsDismissed(bool isAccepted)
		{
			this.DismissViewController (true, () => {
				if (!isAccepted) {
					if (CanceledEvent != null)
						CanceledEvent ();
				}
			});

		}

		async partial void SubmitRegistration (MonoTouch.Foundation.NSObject sender)
		{
			iOSLoginManager loginManager = iOSLoginManager.Instance;

			String username = txtEmailAddress.Text;
			String password = txtPassword.Text;
			String verifyPassword = txtVerifyPassword.Text;
			String firstName = txtFirstName.Text;
			String lastName = txtLastName.Text;



			if(String.IsNullOrEmpty(firstName) || String.IsNullOrEmpty(lastName) || 
				String.IsNullOrEmpty(verifyPassword) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(username))
			{
				UIAlertView alert = new UIAlertView ("Error", "All fields are required", null, "OK", null);
				alert.Show();
			}else if(password!=verifyPassword)
			{
				UIAlertView alert = new UIAlertView ("Error", "Passwords don't match", null, "OK", null);
				alert.Show();
			}
			else
			{
				RegistrationApplicant regApp = new RegistrationApplicant(username, password, verifyPassword, firstName, lastName);

				LoginResult loginResult = await regApp.Register(loginManager); //await loginManager.Register(username, password, firstName, lastName);

				GAI.SharedInstance.DefaultTracker.Send (GAIDictionaryBuilder.CreateEvent("ui_action", "register user", "register result", loginResult.Success).Build());

				if(loginResult.Success)
				{
					if( RegisteredEvent!=null)
						RegisteredEvent();
				}
				else
				{
					UIAlertView alert = new UIAlertView ("Error", loginResult.ErrorString, null, "OK", null);
					alert.Show();
				}

			}
		}
	}
}
